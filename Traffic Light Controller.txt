Program:
/*
 * main.c
 *
 * Created: 8/5/2025 4:20:41 PM
 *  Author: Ritesh
 */ 

/*
 Green Light ->PB0
 Yellow Light -> PB1
 Red Light -> PB2
 */
#include <xc.h>
void Delay(int, int[]);
int main(void)
{
	/* GPIO Configuration */
	PORTB=0x00;
	DDRB|=0x07; // PB0-PB2 -> Output Mode 
    TCCR0=0x02; // Normal mode of the timer, Timer clock =CPI_clock/8;
   TCNT0=0x00;
   DDRC=0xFF;
   int seg_digits[10] = {
	   0x3F, // 0
	   0x06, // 1
	   0x5B, // 2
	   0x4F, // 3
	   0x66, // 4
	   0x6D, // 5
	   0x7D, // 6
	   0x07, // 7
	   0x7F, // 8
	   0x6F  // 9
   };
   
   while(1)
    {
	PORTB|=(1<<0);  // Green ON
	PORTB&=~(1<<1); // Yellow off
	PORTB&=~(1<<2); // Red off
	
	Delay(10,seg_digits);    // 10 sec delay
    
	PORTB&=~(1<<0);  // Green Off
    PORTB|=(1<<1); // Yellow ON
	PORTB&=~(1<<2); // Red off
    
	Delay(5, seg_digits);    // 10 sec delay
	
	PORTB&=~(1<<0);  // Green off
	PORTB&=~(1<<1); // Yellow off
	PORTB|=(1<<2); // Red on
	
	Delay(10, seg_digits);
	}
}
    void Delay(int i, int seg_digits[])
	{
	int sec_counter;
	int sec;
	unsigned int count=0;
	int a=0;
	unsigned int j=0;
	if(i==10)
	sec=9;
	else
	sec=5;
	j = (i*1000000)/256; // Timer clock = 1 MHz
	TCNT0=0x00;
	while(count<=j)
	{		
	PORTC=seg_digits[sec];	
			
	a = TIFR & (1<<0);    // Checking timer overflow flag
	if(a==1)
	{
		count++;
		sec_counter++;
		TIFR |=(1<<0);  // Reseting the timer overflow flag
       if(sec_counter>=3906)
	   {
		   sec--;
		   sec_counter=0;
	   }	
	}			
	}   
	}
	

